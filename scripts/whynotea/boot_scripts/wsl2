#!/bin/bash
#==============================================================================
# Global constants
#==============================================================================
# A list of useful constants
bin_name=$(basename "$0")
USER="whynotea"
#------------------------------------------------------------------------------

#==============================================================================
# Sourced Functions
#==============================================================================
# Try to avoid sourcing other libraries from within a library.
#------------------------------------------------------------------------------

#==============================================================================
# Library Functions
#==============================================================================
function whynotea_script {
  #============================================================================
  # Default values
  #============================================================================
  local status=0 #Explicitly set exit status. Avoid using last commands. 
  local IFS=$' \t\n' 

  local verbose=false #Assume verbose output. 
  #----------------------------------------------------------------------------

  #============================================================================
  # Usage 
  #============================================================================
  Usage()
  {
    IFS=$'\t' read -r -d '%' output <<-EOF
		   $bin_name
		   ---
		   usage: $bin_name [options] <command> [<args>]

		   Description: 
		   A bootstrap script for a wsl2 linux disto

		   Options:
		    [-h] - print this usage statement
		    [-v] - print more verbose output
		    [-u <user>] - user to configure during bootstrap
		EOF
    echo "$output" >&2
  }
  #----------------------------------------------------------------------------

  #============================================================================
  # Get Options
  #============================================================================
  local OPTIND # Needed to call getopts multiple times within a script
  while getopts ":hvu:" opt; do
    case $opt in
      h) 
        Usage 
        exit 1
        ;;
      v) 
        verbose=true
        ;;
      u) 
        USER="$OPTARG"
        ;;
      \?)
        echo "Invalid option: -$OPTARG." >&2
        Usage
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
     esac
  done
  shift "$((OPTIND-1))"
  #----------------------------------------------------------------------------

  #============================================================================
  # Systemd check
  #============================================================================
  check_systemd()
  {
    ps -ef | grep -v grep | grep -q systemd
    if [[ $? -ne 0 ]]; then
      echo "Systemd is not running on this distro, safe to continue." >&2
    else
      echo "Systemd is running, can't proceed with wsl2 boot." >&2
      exit 1
    fi
  }
  #----------------------------------------------------------------------------

  #============================================================================
  # Install pkgs
  #============================================================================
  install_pkgs()
  {
    dnf -y groupinstall "C Development Tools and Libraries" "Development Tools"
    dnf -y install util-linux-user iptables-nft man man-pages passwd\
           cracklib-dicts util-linux procps-ng iputils iproute findutils\
           ncurses vim-X11 tmux tmux-powerline hostname git zsh\
           langpacks-en_GB conntrack fio parted cri-o slirp4netns\
           openssh-server net-tools bind-utils wireguard-tools wget neovim\
           python3-neovim xz ruby podman-compose nodejs-bash-language-server\
           rsync
  }
  #----------------------------------------------------------------------------

  #============================================================================
  # Configure root user
  #============================================================================
  configure_root_user()
  {
    # The following allows root to use the whynotea bootstrap if running 'sudo zsh'
    sed -i '/Defaults \+always_set_home/s/^/#/' /etc/sudoers
    sed -i '/# \+Defaults \+env_keep += "HOME"/s/^# //' /etc/sudoers
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Configure user zsh
  #============================================================================
  configure_user_zsh()
  {
    rm -f $HOME/.zshenv
    cat <<'EOF' > /home/${USER}/.zshenv
	ZDOTDIR=$HOME/.bootstrap 
	source "$ZDOTDIR/.zshenv"
EOF
    rm -f $HOME/.zprofile
    cat <<'EOF' > /home/${USER}/.zprofile
	source $ZDOTDIR/.zprofile
EOF
    rm -f $HOME/.zshrc
    cat <<'EOF' > /home/${USER}/.zshrc
	source $BOOTSTRAP/.zshrc
EOF
    rm -f $HOME/.zlogin
    cat <<'EOF' > /home/${USER}/.zlogin
	source $BOOTSTRAP/.zshrc
EOF
    chown ${USER}:${USER} /home/${USER}/.zshenv
    chown ${USER}:${USER} /home/${USER}/.zshrc
    chown ${USER}:${USER} /home/${USER}/.zprofile
    chown ${USER}:${USER} /home/${USER}/.zlogin
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Configure user git
  #============================================================================
  configure_user_git()
  {
    cat <<'EOF' > /home/${USER}/.gitconfig
[user]
  email = Tony.Liam.Merrigan@gmail.com
  name = Tony Liam Merrigan
[diff]
  tool = whynotea
[difftool "whynotea"]
  cmd = vimx -b -u $BOOTSTRAP_VIM/vimrc -d $LOCAL $REMOTE $MERGED
[pull]
        rebase = true
[init]
        defaultBranch = main
[filter "lfs"]
        clean = git-lfs clean -- %f
        smudge = git-lfs smudge -- %f
        process = git-lfs filter-process
        required = true
[core]
  autocrlf = input
  excludesFile = ~/.gitignore
[alias]
  ignored = !git ls-files -v | grep "^[[:lower:]]"
  ignorefiles = !git update-index --assume-unchanged
  unignorefiles = !git update-index --no-assume-unchanged

[credential]
	helper = /mnt/c/Program\\ Files\\ \\(x86\\)/Git\\ Credential\\ Manager/git-credential-manager.exe
[credential "github.com"]
	useHttpPath = true
EOF
    chown ${USER}:${USER} /home/${USER}/.gitconfig
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Configure user env
  #============================================================================
  configure_user_shell()
  {
    su "$USER" <<'EOF'
(cd "$HOME/github/bootstrap" && git pull) || git clone "https://github.com/whynotea/bootstrap.git" "$HOME/github/bootstrap"
(cd "$HOME/github/bash" && git pull) || git clone "https://github.com/whynotea/bash.git" "$HOME/github/bash"
(cd "$HOME/github/zsh" && git pull) || git clone --recurse-submodules "https://github.com/whynotea/zsh.git" "$HOME/github/zsh"
(cd "$HOME/github/tmux" && git pull) || git clone "https://github.com/whynotea/tmux.git" "$HOME/github/tmux"
(cd "$HOME/github/nvim" && git pull) || git clone "https://github.com/whynotea/nvim.git" "$HOME/github/nvim"
rm -f $HOME/.bootstrap && ln -s $HOME/github/bootstrap $HOME/.bootstrap
rm -f $HOME/github/bootstrap/include/bash && ln -s $HOME/github/bash $HOME/github/bootstrap/include/bash
rm -f $HOME/github/bootstrap/include/zsh && ln -s $HOME/github/zsh $HOME/github/bootstrap/include/zsh
rm -f $HOME/github/bootstrap/include/tmux && ln -s $HOME/github/tmux $HOME/github/bootstrap/include/tmux
rm -f $HOME/github/bootstrap/include/nvim && ln -s $HOME/github/nvim $HOME/github/bootstrap/include/nvim
gem install tmuxinator
EOF
    chsh -s /bin/zsh $USER
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Configure user dev env
  #============================================================================
  configure_user_dev_env()
  {
    echo -e "Installing devtools"
    
    echo -e "Installing golang"
    # GOLANG
    curl -LO https://go.dev/dl/go1.22.2.linux-amd64.tar.gz
    rm -rf /usr/local/go && tar -C /usr/local -xzf go1.22.2.linux-amd64.tar.gz
    
    echo -e "Installing nodejs"
    # NODEJS
    VERSION=v20.12.2
    DISTRO=linux-x64
    curl -LO https://nodejs.org/dist/$VERSION/node-$VERSION-$DISTRO.tar.xz
    mkdir -p /usr/local/lib/nodejs
    tar -xJvf node-$VERSION-$DISTRO.tar.xz -C /usr/local/lib/nodejs
    ln -s /usr/local/lib/nodejs/node-$VERSION-$DISTRO /usr/local/lib/nodejs/nodejs-latest
    
    runuser -l $USER -c 'npm install -g @devcontainers/cli'

    echo -e "Installing wails"
    dnf install -y gtk3-devel webkit2gtk4.0-devel upx
    runuser -l $USER -c 'go install github.com/wailsapp/wails/v2/cmd/wails@latest'
    echo -e "Finished installing wails"

    echo -e "Finished installing devtools"
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Configure user
  #============================================================================
  configure_user()
  {
    configure_user_zsh
    configure_user_git
    configure_user_shell
    #configure_user_dev_env
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Configure enterns
  #============================================================================
  configure_enterns()
  {
    rm -f /usr/local/bin/enterns
    cat <<'EOF' > /usr/local/bin/enterns
#!/bin/bash
if [[ -z "$WHYNOTEA_WSL_NS" ]]; then
  exit 0
fi
SYSDPID=`ps -eo cmd,pid | grep -m 1 ^/lib/systemd/systemd | awk '{print $2}'`
if [ ! -z "$SYSDPID" ] && [ "$SYSDPID" != "1" ]; then
        NSENTER=("nsenter" "-m" "-p" "-t" "$SYSDPID" "--wd=$PWD")

        if [ "$UID" != "0" ]; then
                NSENTER=("sudo" "${NSENTER[@]}")
                if [ "$#" != "0" ]; then
                        NSENTER+=("sudo" "-u" "$USER")
                else
                        NSENTER+=("su" "-l" "$USER")
                fi
        fi
        "${NSENTER[@]}" "XDG_CACHE_HOME=/home/whynotea/.bootstrap/.xdg/cache"\
                        "XDG_CONFIG_HOME=/home/whynotea/.bootstrap/.xdg/config"\
                        "XDG_DATA_HOME=/home/whynotea/.bootstrap/.xdg/data"\
                        "$@"
fi
EOF
    chmod +x /usr/local/bin/enterns
  }
  #============================================================================
  # Configure /root/bootstrap
  #============================================================================
  configure_root_bootstrap()
  {
    rm -f /root/bootstrap
    cat <<'EOF' > /root/bootstrap
#!/bin/bash

# Exit if systemd is already running in this context (e.g., if this script is called by systemd itself)
ps -ef | grep -v grep | grep -q systemd && exit 0

# 1. Ensure the root filesystem in the *parent* (main) namespace is shared.
# This is crucial for propagation to work between the main namespace and the new one.
# If /tmp is a separate mount (e.g., a dedicated tmpfs), you might also need:
# sudo mount --make-shared /tmp
# However, marking / shared is usually sufficient for /tmp if it's part of the rootfs.
# We need to do this as root, hence the sudo.
sudo mount --make-shared /

# Allow a moment for the mount propagation change to take effect
sleep 0.1

# 2. Start a new systemd instance in a new set of namespaces
nohup sudo unshare \
  --kill-child \
  --fork \
  --pid \
  --mount \
  --mount-proc \
  --propagation shared \
  /lib/systemd/systemd >/dev/null 2>&1 &

sleep 0.1
EOF
    chmod +x /root/bootstrap
    rm -f /etc/wslmotd
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Configure /etc/profile.d/enterns.sh
  #============================================================================
  configure_profile_enterns()
  {
    rm -f /etc/profile.d/enterns.sh
    cat <<'EOF' > /etc/profile.d/enterns.sh
SYSDPID=`ps -eo cmd,pid | grep -m 1 ^/lib/systemd/systemd | awk '{print $2}'`
if [ ! -z "$SYSDPID" ] && [ "$SYSDPID" != "1" ]; then
	/usr/local/bin/enterns
fi
EOF
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Configure ns
  #============================================================================
  configure_ns()
  {
    configure_enterns
    configure_root_bootstrap
    configure_profile_enterns
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Configure tmuxinator
  #============================================================================
  configure_tmuxinator()
  {
    tmuxinator_dir=/home/whynotea/.bootstrap/.xdg/config/tmuxinator
    mkdir -p $tmuxinator_dir
    rm -f $tmuxinator_dir/local.yml
    cat <<'EOF' > $tmuxinator_dir/local.yml
# /home/whynotea/.bootstrap/.xdg/config/tmuxinator/local.yml

name: local
root: ~/

# Optional tmux socket
# socket_name: foo

# Note that the pre and post options have been deprecated and will be replaced by
# project hooks.

# Project hooks

# Runs on project start, always
# on_project_start: command

# Run on project start, the first time
# on_project_first_start: command

# Run on project start, after the first time
# on_project_restart: command

# Run on project exit ( detaching from tmux session )
# on_project_exit: command

# Run on project stop
# on_project_stop: command

# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.
# pre_window: rbenv shell 2.0.0-p247

# Pass command line options to tmux. Useful for specifying a different tmux.conf.
# tmux_options: -f ~/.tmux.mac.conf

# Change the command to call tmux. This can be used by derivatives/wrappers like byobu.
# tmux_command: byobu

# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.
# startup_window: editor

# Specifies (by index) which pane of the specified window will be selected on project startup. If not set, the first pane is used.
# startup_pane: 1

# Controls whether the tmux session should be attached to automatically. Defaults to true.
# attach: false

windows:
  - work:
      layout: tiled
      # Synchronize all panes of this window, can be enabled before or after the pane commands run.
      # 'before' represents legacy functionality and will be deprecated in a future release, in favour of 'after'
      # synchronize: after
      panes:
        - 
        - ns 
        - 
        - 
  - scratch: 
EOF
  }
  #----------------------------------------------------------------------------
  #============================================================================
  # Function Main
  #============================================================================
  if [[ $verbose == true ]]; then
    echo "Running with verbose output"
  fi

  echo "Installing user $USER"
  #check_systemd
  install_pkgs
  configure_root_user
  configure_user
  configure_ns
  configure_tmuxinator

  return $status
  #----------------------------------------------------------------------------
}
whynotea_script "$@"
#------------------------------------------------------------------------------
